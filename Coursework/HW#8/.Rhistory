df <- baeskel
View(df)
View(df)
df <- baeskel
Sulfur <- df$Sulfur
Tension <- df$Tension
FirstOrder <- lm(Tension ~ Sulfur)
SecondOrder <- lm(Tension ~ I(Sulfur)^2)
ThirdOrder <- lm(Tension ~ I(Sulfur)^3)
plot(Tension ~ Sulfur)
lines(sort(Sulfur),predict(FirstOrder)[order(Sulfur)], lwd = 1,col = "darkgreen")
lines(sort(Sulfur),predict(SecondOrder), lwd = 1,col = "red")
FirstOrder <- lm(Tension ~ Sulfur)
SecondOrder <- lm(Tension ~ I(Sulfur^2))
ThirdOrder <- lm(Tension ~ I(Sulfur^3))
plot(Tension ~ Sulfur)
lines(sort(Sulfur),predict(FirstOrder)[order(Sulfur)], lwd = 1,col = "darkgreen")
lines(sort(Sulfur),predict(SecondOrder), lwd = 1,col = "red")
plot(Tension ~ Sulfur)
lines(sort(Sulfur),predict(FirstOrder)[order(Sulfur)], lwd = 1,col = "darkgreen")
lines(sort(Sulfur),predict(SecondOrder)[order(Sulfur)], lwd = 1,col = "red")
ThirdOrder <- lm(Tension ~ I(Sulfur^3))
plot(Tension ~ Sulfur)
lines(Sulfur,predict(FirstOrder), lwd = 1,col = "darkgreen")
lines(Sulfur,predict(SecondOrder), lwd = 1,col = "red")
lines(Sulfur,predict(FirstOrder), lwd = 1,col = "darkgreen")
lines(linspace(min(Sulfur), max(Sulfur), n = 100),predict(SecondOrder), lwd = 1,col = "red")
plot(Tension ~ Sulfur)
lines(Sulfur,predict(FirstOrder), lwd = 1,col = "darkgreen")
lines(linespace(min(Sulfur), max(Sulfur), n = 100),predict(SecondOrder), lwd = 1,col = "red")
lines(Sulfur,predict(FirstOrder), lwd = 1,col = "darkgreen")
lines(seq(min(Sulfur), max(Sulfur), n = 100),predict(SecondOrder), lwd = 1,col = "red")
lines(Sulfur,predict(FirstOrder), lwd = 1,col = "darkgreen")
lines(seq(min(Sulfur), max(Sulfur), .01),predict(SecondOrder), lwd = 1,col = "red")
lines(seq(min(Sulfur), max(Sulfur), .01)),predict(SecondOrder), lwd = 1,col = "red")
lines(seq(min(Sulfur), max(Sulfur), .01)), predict(SecondOrder)[seq(min(Sulfur), max(Sulfur), .01))], lwd = 1,col = "red")
lines(seq(min(Sulfur), max(Sulfur), .01)) predict(SecondOrder)[seq(min(Sulfur), max(Sulfur), .01))], lwd = 1,col = "red")
X = seq(min(Sulfur), max(Sulfur), .01))
X = seq(min(Sulfur), max(Sulfur), .01))
lines(seq(min(Sulfur), max(Sulfur), .01), predict(SecondOrder)[seq(min(Sulfur), max(Sulfur), .01)], lwd = 1,col = "red")
X = seq(min(Sulfur), max(Sulfur), .01)
lines(X, predict(SecondOrder)[X], lwd = 1,col = "red")
lines(Sulfur,predict(FirstOrder), lwd = 1,col = "darkgreen")
lines(X, predict(SecondOrder)[X], lwd = 1,col = "red")
plot(Tension ~ Sulfur)
lines(grid,predict(FirstOrder, newdata =data.frame(ppgdp = grid)), lwd = 1,col = "darkgreen")
y <- predict(FirstOrder, newdata =data.frame(ppgdp = grid))
y <- predict(FirstOrder, newdata = data.frame(Sulfur = grid))
grid <-seq(min(Sulfur), max(sulfur), length = 100)
grid <-seq(min(Sulfur), max(Sulfur), length = 100)
y <- predict(FirstOrder, newdata = data.frame(Sulfur = grid))
plot(Tension ~ Sulfur)
lines(grid,predict(FirstOrder, newdata =data.frame(ppgdp = grid)), lwd = 1,col = "darkgreen")
plot(Tension ~ Sulfur)
lines(grid,y, lwd = 1,col = "darkgreen")
lines
lines(grid,predict(FirstOrder, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "green")
plot(Tension ~ Sulfur)
lines(grid,predict(FirstOrder, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "green")
lines(grid,predict(SecondOrder, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "red")
lines(grid,predict(ThirdOrder, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "blue")
Spline3 = lm(Tension ~ bs(Sulfur, df=3))
Spline4 = lm(Tension ~ bs(Sulfur, df=4))
Spline5 = lm(Tension ~ bs(Sulfur, df=5))
lines(grid,predict(Spline3, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "green")
lines(grid,predict(Spline4, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "red")
lines(grid,predict(Spline5, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "blue")
grid <-seq(min(Sulfur), max(Sulfur), length = 100)
plot(Tension ~ Sulfur)
lines(grid,predict(FirstOrder, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "green")
lines(grid,predict(SecondOrder, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "red")
lines(grid,predict(ThirdOrder, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "blue")
Spline3 = lm(Tension ~ bs(Sulfur, df=3))
Spline4 = lm(Tension ~ bs(Sulfur, df=4))
Spline5 = lm(Tension ~ bs(Sulfur, df=5))
lines(grid,predict(Spline3, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "green")
lines(grid,predict(Spline4, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "red")
lines(grid,predict(Spline5, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "blue")
legend("bottomright", legend =c("3",'4', '5'), lwd = 1.5, col =c("green","red", "blue"))
legend("bottomright", legend =c("3",'4', '5'), lwd = 1.5, col =c("green","red", "blue"), main = 'df')
lines(grid,predict(Spline5, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "blue")
legend("bottomright", legend =c("3",'4', '5'), lwd = 1.5, col =c("green","red", "blue"), main = 'df')
lines(grid,predict(Spline5, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "blue")
legend("bottomright", legend =c("3",'4', '5'), lwd = 1.5, col =c("green","red", "blue"), title = 'df')
grid <-seq(min(Sulfur), max(Sulfur), length = 100)
plot(Tension ~ Sulfur)
lines(grid,predict(FirstOrder, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "green")
lines(grid,predict(SecondOrder, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "red")
lines(grid,predict(ThirdOrder, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "blue")
legend("bottomright", legend =c("3",'4', '5'), lwd = 1.5, col =c("green","red", "blue"), title = 'order')
Spline3 = lm(Tension ~ bs(Sulfur, df=3))
Spline4 = lm(Tension ~ bs(Sulfur, df=4))
Spline5 = lm(Tension ~ bs(Sulfur, df=5))
plot(Tension ~ Sulfur)
lines(grid,predict(Spline3, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "green")
lines(grid,predict(Spline4, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "red")
lines(grid,predict(Spline5, newdata = data.frame(Sulfur = grid)), lwd = 1.5,col = "blue")
legend("bottomright", legend =c("3",'4', '5'), lwd = 1.5, col =c("green","red", "blue"), title = 'df')
birch <- c(0,
3,
2,
0,
0,
1)
not_birch <- c(10,
16,
15,
7,
14,
5)
p_est = sum(birch)/sum(birch + not_birch)
p_est
expected = p_est * sum(birch + not_birch)
mse = sum((birch - expected)^2)/length(expected) - 1
se = sqrt(((173-length(birch))/173)*(1/mean(birch)^2)*(mse/length(birch)))
se
(1/mean(birch)^2)
mean(birch)^2
birch
mse
mse
expected
expected = p_est * (birch + not_birch)
mse = sum((birch - expected)^2)/length(expected) - 1
se
se = sqrt(((173-length(birch))/173)*(1/mean(birch)^2)*(mse/length(birch)))
mse
se
mean(birch)
mse
Totals = birch + not_birch
p_est
expected = p_est*Totals
expected
birch
n = 6
mse = sum((birch - expected)^2)/(n-1)
mse
N = 173
> se = sqrt((N-n)/n)*(1/mean(birch)^2)*(mse/n))
se = sqrt((N-n)/n)*(1/mean(birch)^2)*(mse/n))
se = sqrt(((N-n)/n)*(1/mean(birch)^2)*(mse/n))
se
se = sqrt(((N-n)/n)*(1/mean(birch))^2*(mse/n))
se
se = sqrt(((N-n)/n)* (n/sum(Totals))^2 * (mse/n))
se
#SRS of clusters - 5' wide veritcal bars from right to left + each end
pop <- 171 + 2
n <- 6
set.seed(102221); samp <- sample(pop, n, replace = F)
samp_assigned <- matrix(samp, nrow = 3, byrow = T, dimnames = list(c("Stefano", "Thomas", "Bria"), c("samp1", "samp2")))
samp_assigned
#location of samples where 0 is the end of sample 1
samp_assigned * 5 - 2.5
birch
not_birch
Totals
#Reading data
tau_i <- c(0, 3, 2, 0, 0, 1)
not_birch <- c(10, 16, 15, 7, 14, 5)
M_i <- tau_i + not_birch
#Computing Estimate
p_est = sum(tau_i)/sum(M_i)
p_est
#Computing SE
expected = p_est*M_i
mse = sum((tau_i - expected)^2)/(n-1)
se = sqrt(((N-n)/n)* (n/sum(Totals))^2 * (mse/n))
se
#Computing Confidence Interval
CI <- c(p_est + 2*se, p_est - 2*se)
#Computing SE
expected = p_est*M_i
mse = sum((tau_i - expected)^2)/(n-1)
se = sqrt(((N-n)/n)* (n/sum(M_i))^2 * (mse/n))
#Computing Confidence Interval
CI <- c(p_est + 2*se, p_est - 2*se)
CI
tau_i/M_i
se = sqrt(((N-n)/n)* (1/mean(M_i))^2 * (mse/n))
se
se = sqrt(((N-n)/n)* (1/mean(M_i))^2 * (mse/n))
se
se = sqrt(((N-n)/n)* (n/sum(M_i))^2 * (mse/n))
se
CI
dat <- matrix(c(1, 2, 3, 4, 5, 6, 0, 3, 0, 1, 2, 0, 10, 16, 14, 5, 15, 7), nrow = 6)
colnames(dat) <- c("Sample #", "Birch Count", "Not Birch Count")
dat
#adjust data table to show birch count & all tree count
dat[,3] <- dat[,2] + dat[,3]
colnames(dat) <- c("Sample #", "Birch Count", "Total Tree Count")
#estimate proportion
p_hat <- sum(dat[,2])/sum(dat[,3])
#calculate mse & standard error
N <- pop
n <- length(dat[,3])
m <- dat[,3]
expect <- p_hat * m
tau <- dat[,2]
mse <- sum((tau - expect)^2) / (n - 1)
se_phat = sqrt(((N - n) / N) * (1 / mean(m)^2) * (mse/n))
CI95_phat <- round(c(p_hat, max(p_hat - 2 * se_phat, 0), min(p_hat + 2 * se_phat, 1)), 4)
names(CI95_phat) = c("p hat", "Lower Bound", "Upper Bound")
CI95_phat
sqrt(((N - n) / N) * (1 / mean(m)^2) * (mse/n))
N
n
1 / mean(m)^2
(n/sum(M_i))^2
mse
#Computing SE
expected = p_est*M_i
mse = sum((tau_i - expected)^2)/(n-1)
mse
#calculate mse & standard error
N <- pop
n <- length(dat[,3])
m <- dat[,3]
expect <- p_hat * m
tau <- dat[,2]
mse <- sum((tau - expect)^2) / (n - 1)
m
M_i
sum(m)
sum(M_1)
sum(M_i)
#Computing SE
expected = p_est*M_i
mse = sum((tau_i - expected)^2)/(n-1)
se = sqrt(((N-n)/n)* (n/sum(M_i))^2 * (mse/n))
#calculate mse & standard error
N <- pop
n <- length(dat[,3])
m <- dat[,3]
expect <- p_hat * m
tau <- dat[,2]
mse <- sum((tau - expect)^2) / (n - 1)
se_phat = sqrt(((N - n) / N) * (1 / mean(m)^2) * (mse/n))
se_phat
mse <- sum((tau - expect)^2) / (n - 1)
mse
#Computing SE
expected = p_est*M_i
mse = sum((tau_i - expected)^2)/(n-1)
se = sqrt(((N-n)/n)* (n/sum(M_i))^2 * (mse/n))
mse
se
se = sqrt(((N-n)/n)*((n/sum(M_i))^2)*(mse/n))
se
se = sqrt(((N - n) / N) * (n / sum(M_i))^2 * (mse/n))
se
p_phat
p_hat
se = sqrt( ((N - n) / N) * (n / sum(M_i))^2 * (mse/n) )
#Computing Confidence Interval
CI <- c(p_est + 2*se, p_est - 2*se)
#CI
#CI
#[1]  0.4369393 -0.2725558
#CI
#[1]  0.4369393 -0.2725558
#Computing SE
expected = p_est*M_i
mse = sum((tau_i - expected)^2)/(n-1)
se = sqrt( ((N - n) / N) * (n / sum(M_i))^2 * (mse/n) )
se
#Computing Confidence Interval
CI <- c(p_est + 2*se, p_est - 2*se)
CI
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
office <- 1:16
employees <- c(24, 35, 20, 52, 18, 15, 24, 63, 21,
17, 23, 26, 43, 48, 15, 25)
cbind(office, employees)
df = cbind(office, employees)
df[employees]
df[2]
df[:,1]
df[:,2]
df[,:]
df[,1:length(df)]
df[,1:length(df)-1]
df[,1:4]
df = data.frame(office, employees)
p = df$employees/sum(df$employees)
p
Office_Sample  = sample(df$office, size = 5, replace = TRUE,prob = p)
Office_Sample
df$employees[Office_Sample]
# Total sick days for offices 1 to 16.
total_sick_days <- c(28,56,23,81,25,26,40,103,35,25,49,32,55,71, 21,36)
total_sick_days[Office_Sample]
x_i = total_sick_days[Office_Sample]
m_i = df$employees[Office_Sample]
M = sum(df$employees)
n = 5
est_tau = (M/n)*sum(x_i/m_i)
est_tau
est_Var = (1/n)*((((M*x_i)/m_i) - est_tau)^2/(n-1))
est_Var
est_Var = (1/n)*(sum((((M*x_i)/m_i) - est_tau)^2)/(n-1))
est_Var
sqrt(est_Var)
se = sqrt(est_Var)
CI = c(est_tau + 2*se,est_tau - 2*se )
CI
se
x = 1:15
x
combn(15, 2)
combn(15, 2)''
t(combn(15, 2))
for (i in 1:10) {}
for (i in 1:10) {}
for (i in 1:10) {
}
Coordinates <- matrix( nrow = 150, ncol= 2)
for (i in 1:10) {
for (j in 1:15){
Coordinates[((i - 1)*15 + j),1] = i
Coordinates[((i - 1)*15 + j),2] = j
}
}
Coordinates
SRS_plot <- sample(Coordinates, size = 8, replace = TRUE)
SRS_plot
SRS_plot <- sample(Coordinates, size = 8, replace = TRUE)
SRS_plot
SRS_plot <- sample(Coordinates, size = 8, replace = TRUE)
SRS_plot
SRS_plot <- sample(t(Coordinates), size = 8, replace = TRUE)
SRS_plot
Coordinates[sample(nrow(Coordinates),size=8,replace=TRUE),]
Coordinates[sample(nrow(Coordinates),size=8,replace=TRUE)]
Coordinates[sample(nrow(Coordinates),size=8,replace=TRUE),]
SRS_plot = Coordinates[sample(nrow(Coordinates),size=8,replace=TRUE),]
SRS_plot
setwd("~/Documents/Documents/College Work/Homework-Fall-2021/Scientific Sampling/HW#7")
df <- read.csv('AdaptiveSampling.csv')
df
View(df)
Vec_of_tau <- df$count/df$probability
df$probability
df <- read.csv('AdaptiveSampling.csv')
Vec_of_tau <- df$count/(df$probability/150)
df$probability = df$probability/150
View(df)
Tau_est = mean(Vec_of_tau)
Tau_est
Var_Tau = var(Vec_of_tau)/length(Vec_of_tau)
Var_Tau
se = sqrt(Var_Tau)
se
CI = c(Tau_est + 2*se, Tau_est - 2*se)
CI
load(alr4)
library(alr4)
df <- water
View(df)
lm(log(BSAAM)~log(APMAM)+log(APSAB)+log(APSLAKE)+ log(OPBPC)+log(OPRC)+log(OPSLAKE), data = df)
WaterModel <- lm(log(BSAAM)~log(APMAM)+log(APSAB)+log(APSLAKE)+ log(OPBPC)+log(OPRC)+log(OPSLAKE), data = df)
summary(WaterModel)
residualPlot(WaterModel)
residualPlot(WaterModel, type = 'pearson')
residualPlot(WaterModel, type = 'standardized')
residualPlot(WaterModel, type = 'studentized')
resplot(WaterModel)
install.packages('handyplots')
library(handyplots)
resplot(WaterModel)
resplot(WaterModel, residuals = 'student')
resplot(WaterModel, residuals = 'rstudent')
resplot(WaterModel, residuals = 'studentied')
resplot(WaterModel, residuals = 'standard')
resplot(WaterModel, residuals = 'pearson')
residualPlots(WaterModel)
df <-pipline
df <-pipeline
df
scatterplot(Lab, Field, data = df)
scatterplot(df$Lab, df$Field)
scatterplot(df$Field, df$Lab, regLine = TRUE, boxplots = FALSE,
smooth = FALSE, xlab = 'Field Results', ylab = 'Lab Results')
scatterplot(df$Field, df$Lab, regLine = FALSE, boxplots = FALSE,
smooth = FALSE, xlab = 'Field Results', ylab = 'Lab Results')
SLR_Pipline <- lm(Lab ~ Field, data = df)
residualPlots(SLR_Pipline)
residualPlots(SLR_Pipline, AsIs = FALSE)
residualPlots(SLR_Pipline)
residualPlots(SLR_Pipline, terms = ~-1)
ncvTest(SLR_Pipline)
df <- water
WaterModel <- lm(log(BSAAM) ~ log(APMAM)+
log(APSAB)+
log(APSLAKE)+
log(OPBPC)+
log(OPRC)+
log(OPSLAKE), data = df)
residuals <- rstudent(WaterModel)
residuals
2*pt(x, 43 - 1 - 2)
2*pt(x, 43 - 6 - 2)
outlierTest(WaterModel)
x
2*pt(residuals, 43 - 6 - 2)
2*pt(t(residuals), 43 - 6 - 2)
t(2*pt(t(residuals), 43 - 6 - 2))
2*pt(t(residuals), 43 - 6 - 2)
outlierTest(WaterModel)
cookd(WaterModel)
cooks.distance(WaterModel)
4/43
for (i in cooks.distance(WaterModel)){
if (i > (4/43)){
print(i)}
}
residualPlot(WaterModel)
scatterplot(WaterModel)
scatterplotMatrix(WaterModel)
residualPlots(WaterModel)
cooksd <- cooks.distance(WaterModel)
plot(cooksd, pch="*")
abline(h = 4/43, col="red")
influential <- as.numeric(names(cooksd)[(cooksd > (4/43))])
influence()
influential
plot(cooksd, pch="o")
abline(h = 4/43, col="blue")
abline(h = 4/length(cooksd), col="blue")
water
pca(df)
correlogram(WaterModel)
corrgram(WaterModel)
library(corrgram)
install.packages(corrgram)
dwt(WaterModel)
install.package(corrgram)
install.packages(corrgram)
install.packages("GGally")
ggpairs(WaterModel)
library(GGally)
ggpairs(WaterModel)
qqplot(WaterModel)
qqplot(residuals(WaterModel))
shapiro.test(residuals(WaterModel))
qqnorm(WaterModel)
qqnorm(residuals(WaterModel))
qqnline(residuals(WaterModel))
qqline(residuals(WaterModel))
residualPlot(WaterModel)
residualPlots(WaterModel)
df <- domedata1
load(alr4)
library(alr4)
library(alr4)
df <- domedata1
df$Date <- factor(df$Date)
df$Cond <- factor(df$Cond)
df
is.factor(df$Date)
is.factor(df$Cond)
is.factor(df)
Dome_Model <- lm(Dist ~. , data = df)
summary(Dome_Model)
Anova(Dome_Model)
Dome_Model_NoCond <- lm(Dist ~.-Cond , data = df)
Anova(Dome_Model, Dome_Model_NoCond)
anova(Dome_Model, Dome_Model_NoCond)
Dome_Model_NoCond <- lm(Dist ~. - Cond , data = df)
anova(Dome_Model, Dome_Model_NoCond)
plot(Effect(cond, Dome_Model)
)
plot(Effect(CondTailwind, Dome_Model))
Anova(Dome_Model)
shapiro.test(residuals(Dome_Model))
dwt(Dome_Model)
bptest(Dome_Model)
nvcTest(Dome_Model)
ncvTest(Dome_Model)
qqline(residuals(Dome_Model))
qqline((Dome_Model))
qqline(residuals(Dome_Model))
qqLine(residuals(Dome_Model))
qqline(residuals(Dome_Model))
qqnorm(residuals(Dome_Model))
qqline(residuals(Dome_Model))
betahat.not.i <-influence(Dome_Model)$coefficients
Panel.fun <- function(x, y, ...) {
points(x, y, ...)
dataEllipse(x, y, plot.points = FALSE,levels =c(0.9))
showLabels(x, y, labels =rownames(UN11), id.method = "mahal", id.n = 4,
id.cex = 1, id.col =carPalette()[1])
}
pairs(betahat.not.i, panel = panel.fun)
betahat.not.i <-influence(Dome_Model)$coefficients
panel.fun <- function(x, y, ...) {
points(x, y, ...)
dataEllipse(x, y, plot.points = FALSE,levels =c(0.9))
showLabels(x, y, labels =rownames(UN11), id.method = "mahal", id.n = 4,
id.cex = 1, id.col =carPalette()[1])
}
pairs(betahat.not.i, panel = panel.fun)
residualPlots(Dome_Model)
detach(alr4)
detach('alr4')
detach("package:alr4", unload = TRUE)
detach("package:alr4", unload = TRUE)
df<- alr4::domedata1
df
