summary(modelMadisonPred_Resp)
summary(modelMadisonPred_Resp)
summary(modelJayPred_Resp)
summary(modelUlyssesPred_Resp)
residualPlots(modelUlyssesPred_Resp) ## Best
residualPlots(modelJayPred_Resp) ## Best
prob <- c( 0.3,
0.5,
0.1,
0.4,
0.6,
0.2,
0.4,
0.5)
sum(1/prob)
se = sqrt(sum((1 - prob)/prob^2))
se
EstTotal =  sum(1/prob)
CI <- c(EstTotal + 2*se, EstTotal - 2*se)
CI
CI <- c(EstTotal + 2*se, 8)
CI
Pij = matrix(ncol=3,byrow=TRUE,scan())
Pij = matrix(ncol=3,byrow=TRUE,c(4/12, 2/12, 1/12, 2/12, 3/12, 2/12, 1/12, 2/12, 4/12),
)
Pij
2/12
y <- c(7, 6, 11)
Pi <- c(4/12,
3/12,
4/12)
estTau = sum(y/Pi)
estTau
est.var = 0
for(i in 1:3){ for(j in 1:3){+ est.var = hold + (Pij[i,j] - Pi[i]*Pi[j])*x[i]*x[j]/(Pij[i,j]*Pi[i]*Pi[j])+ }}
for(i in 1:3){ for(j in 1:3){+ est.var = hold + (Pij[i,j] - Pi[i]*Pi[j])*x[i]*x[j]/(Pij[i,j]*Pi[i]*Pi[j])+ }}
for(i in 1:3){ for(j in 1:3){est.var = hold + (Pij[i,j] - Pi[i]*Pi[j])*x[i]*x[j]/(Pij[i,j]*Pi[i]*Pi[j])+ } }
for(i in 1:3){ for(j in 1:3){
est.var = hold + (Pij[i,j] - Pi[i]*Pi[j])*x[i]*x[j]/(Pij[i,j]*Pi[i]*Pi[j])
}}
hold = 0
for(i in 1:3){ for(j in 1:3){
est.var = hold + (Pij[i,j] - Pi[i]*Pi[j])*x[i]*x[j]/(Pij[i,j]*Pi[i]*Pi[j])
}}
est.var
Pi
Pij
hold
Pij = matrix(ncol=3,byrow=TRUE,c(4/12, 2/12, 1/12, 2/12, 3/12, 2/12, 1/12, 2/12, 4/12),
+ )
Pij = matrix(ncol=3,byrow=TRUE,c(4/12, 2/12, 1/12, 2/12, 3/12, 2/12, 1/12, 2/12, 4/12))
y <- c(7, 6, 11)
Pi <- c(4/12, 3/12, 4/12)
estTau = sum(y/Pi)
estVar = 0
for(i in 1:3){ for(j in 1:3){
est.Var = est.Var + (Pij[i,j] - Pi[i]*Pi[j])*x[i]*x[j]/(Pij[i,j]*Pi[i]*Pi[j])
}}
for(i in 1:3){ for(j in 1:3){
estVar = estVar + (Pij[i,j] - Pi[i]*Pi[j])*x[i]*x[j]/(Pij[i,j]*Pi[i]*Pi[j])
}}
for(i in 1:3){ for(j in 1:3){
estVar = estVar + (Pij[i,j] - Pi[i]*Pi[j])*y[i]*y[j]/(Pij[i,j]*Pi[i]*Pi[j])
}}
estVar
SE = sqrt(estVar)
SE
estTau
CI = c(estTau + 2*SE, estTau - 2*SE)
CI
sum(y)
CI = c(estTau + 2*SE, 24)
CI
estTau
(1/.1)*ln(8/20)
(1/.1)*log(8/20)
-(1/.1)*log(8/20)
9.162907*1000
((1/(20*.1^2))(exp(9.162907 *.1) - 1)
)
exp(1)
(1/(20*.1^2))(exp(9.162907*.1)-1)
(1/(20*.1^2))*(exp(9.162907*.1)-1)
9.162907 + 2*sqrt(7.5)
9.162907 - 2*sqrt(7.5)
Effort<- c(20, 20, 20, 20 20 20, 20, 20)
Effort<- c(20, 20, 20, 20, 20, 20, 20, 20)
Catch <- c(20, 18, 18, 16, 15, 15, 13, 15)
CPUE = Catch/Effort
CPUE
CC = c(0,cumsum(Catch)[1:length(Catch)])
CC
Catch
sum(Catch)
catch = c(20,16,14,8,7,8,5,6,6)
CC = c(0,cumsum(catch)[1:8])
CC
sum(catch)
CC = c(0,cumsum(Catch)[1:(length(Catch) - 1)])
CC
length(CC)
length(CPUE)
reg_out = lm(CC~CPUE)
scatterplot(reg_out)
library(car)
scatterplot(reg_out)
scatterplot(CC, CPUE)
scatterplot(CPUE, CC)
scatterplot(CPUE, CC, boxplots = FALSE)
scatterplot(CPUE, CC, boxplots = FALSE, reg = FALSE)
scatterplot(CPUE, CC, boxplots = FALSE)
CPUE
CC
hold = predict(reg_out,newdata=data.frame(CPUE=0),interval="confidence")
hold
ls
library('alr4')
df <- Highway
df
Step1Model <- lm(log(I(rate*len)) ~ acpt + slim + lwid, data = df)
summary(Step1Model)
round(cor(df), 2)
cor(df)
round(cor(Step1Model), 2)
View(df)
df$htype = factor(df$htype)
round(cor(df), 2)
round(cor(df[1:5]), 2)
dfQaunt = subset(df, select = -htype )
round(cor(dfQuant), 2)
dfQuant = subset(df, select = -htype )
round(cor(dfQuant), 2)
dfQuantPred = subset(df, select = -c(htype, rate, len))
round(cor(dfQuant), 2)
df$htype = as.factor(df$htype)
round(cor(df), 2)
round(cor(dfQuant), 2)
cor.test(df)
cor.test(df$lwid, df$htype)
is.factor(df$htype)
unclass(df$htype)
cor.test(df$lwid, unclass(df$htype))
> round(cor(dfQuantPred), 2)
round(cor(dfQuantPred), 2)
Step2Model <- lm(log(I(rate*len)) ~. , data = df)
summary(Step2Model)
df <- mantel
df
library(MASS)
FullModel <- lm(Y~., data = df)
step.model <- stepAIC(full.model, direction = "both", trace = FALSE)
step.model <- stepAIC(FullModel, direction = "both", trace = FALSE)
summary(step.model)
ols_step_best_subset(FullModel)
library(leaps)
install.packages('leaps')
library(leaps)
models <- regsubsets(Y~., data = df, nvmax = 3,method = "seqrep")
summary(model)
summary(models)
models <- regsubsets(Y~., data = df, nvmax = 1,method = "seqrep")
summary(models)
install.packages('caret')
library(caret)
AIC(df)
aic(df)
library(MuMIn)
AllModels <- dredge(lm(Y~., data = df))
options(na.action = "na.fail")
AllModels <- dredge(lm(Y~., data = df))
summary(AllModels)
AllModels
AllModels <- dredge(lm(Y~., data = df), rank = 'AIC')
AllModels
AllModels <- dredge(lm(Y~., data = df), rank = 'BIC')
AllModels
df<- galapagos
df
for(i in 1:nrow(df){
for(i in 1:nrow(df)
for(i in 1:nrow(df)){
for(i in 1:nrow(df))
df}
df
for(i in 1:nrow(df))
df
df
for(i in 1:nrow(df)){
df}
for(i in 1:nrow(df)){
df <- within(df, Elevation[i] <- ifelse(is.na(Elevation[i]), 1, Elevation[i]))
}
df
c <- c( 80, 10, 38, 71, 23, 28)
for(i in 1:nrow(df)){
if(df$Elevation[i] == 1){}
}
for(i in 1:nrow(df)){
count = 1
if(df$Elevation[i] == 1){
df$Elevation[i] = c(count)}
}
df
c(0)
c(1)
c(2)
C
c
count = 1
count = count +1
count
df <- galapagos
for(i in 1:nrow(df){
count = 1
if( is.na(df$Elevation[i]) == TRUE){
df$Elevation[i] = c(count)
count = count + 1
}
}
for(i in 1:nrow(df){
for(i in 1:nrow(df)){
count = 1
if( is.na(df$Elevation[i]) == TRUE){
df$Elevation[i] = c(count)
count = count + 1
}
}
df
library(alr4)
df <- galapagos
df
for(i in 1:nrow(df)){
count = 1
if( is.na(df$Elevation[i]) == TRUE){
df$Elevation[i] = c(count)
count = count + 1
}
}
df
df$Elevation[1]
df$Elevation[1] = c(1)
df
c(1)
c(2)
c(3)
FillingNA <- c( 80, 10, 38, 71, 23, 28)
library(alr4)
df <- galapagos
df$Elevation[i] = c(count)
library(alr4)
df <- galapagos
for(i in 1:nrow(df)){
count = 1
if(is.na(df$Elevation[i]) == TRUE){
df$Elevation[i] = c(count)
count = count + 1
}
}
df
library(alr4)
df <- galapagos
for(i in 1:nrow(df)){
count = 1
if(is.na(df$Elevation[i]) == TRUE){
df$Elevation[i] = FillingNA(count)
count = count + 1
}
}
for(i in 1:nrow(df)){
count = 1
if(is.na(df$Elevation[i]) == TRUE){
df$Elevation[i] = FillingNA[count]
count = count + 1
}
}
df
install.packages('glmnet')
library(glmnet)
View(df)
X <- model.matrix(lm(NS ~ Area + Anear + Dist +  DistSC + Elevation ,data= df))
Lasso <- glmnet(X, df$NS, alpha=1, lambda=0.1)
Lasso$beta
Lasso <- glmnet(X, df$NS, alpha=1, lambda=0.2)
Lasso$beta
Lasso <- glmnet(X, df$NS, alpha=1, lambda=0.3)
Lasso$beta
rnorm(2)
N  = 1
n = 40
for(i in 1:N){
x_1 <- rnorm(n)
x_2 <- rnorm(n)
x_3 <- rnorm(n)
x_4 <- rnorm(n)
x_5 <- rnorm(n)
e <- rnorm(n, mean = 0, sd = .3)
y = .5 + .9*x_1 - .5*x_2 - .2*x_3 + e
}
modelIntercept <- lm(y ~ 1)
step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward")
forward = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward")
View(forward)
View(forward)
forward["coefficients"]
extractAIC(forward["coefficients"])
forward["coefficients"]
forward["coefficients"][1]
forward["coefficients"][2]
forward["coefficients"][1]
forward["coefficients"][1][1]
forward["coefficients"][1][3]
forward["coefficients"][1][2]
forward["coefficients"](1)
forward["coefficients"][1,1]
forward["coefficients"]
forward["model"]
extractAIC(forward["model"])
extractAIC(forward["model"])
step.model
forward = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward")
step.model <- stepBIC(FullModel, direction = "both", trace = FALSE)
View(forward)
extractAIC(forward)
forward
forward = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward")
forwardBIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward", k =log(n))
attributes(forwardBIC$terms)$term.labels
identical(attributes(forwardBIC$terms)$term.labels, c("x1","x2","x3"))
N  = 1000
n = 40
BICTest <- rep(FALSE, N)
BICValue <- rep(NaN, N)
AICTest <- rep(FALSE, N)
AICValue <- rep(NaN, N)
for(i in 1:N){
x_1 <- rnorm(n)
x_2 <- rnorm(n)
x_3 <- rnorm(n)
x_4 <- rnorm(n)
x_5 <- rnorm(n)
e <- rnorm(n, mean = 0, sd = .3)
y = .5 + .9*x_1 - .5*x_2 - .2*x_3 + e
modelIntercept <- lm(y ~ 1)
forwardBIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward", k =log(n))
forwardAIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward")
BICValue[i] = extractAIC(forwardBIC)
AICValue[i] = extractAIC(forwardAIC)
if(identical(attributes(forwardBIC$terms)$term.labels, c("x1","x2","x3")) == TRUE){
BICTest[i] == TRUE
}
if(identical(attributes(forwardAIC$terms)$term.labels, c("x1","x2","x3")) == TRUE){
AICTest[i] == TRUE
}
}
AICValue
extractAIC(forwardAIC)
extractAIC(forwardAIC)[2]
identical(attributes(forwardBIC$terms)$term.labels, c("x1","x2","x3"))
attributes(forwardBIC$terms)$term.labels
N  = 1000
n = 40
BICTest <- rep(FALSE, N)
BICValue <- rep(NaN, N)
AICTest <- rep(FALSE, N)
AICValue <- rep(NaN, N)
for(i in 1:N){
x_1 <- rnorm(n);
x_2 <- rnorm(n);
x_3 <- rnorm(n);
x_4 <- rnorm(n);
x_5 <- rnorm(n);
e <- rnorm(n, mean = 0, sd = .3);
y = .5 + .9*x_1 - .5*x_2 - .2*x_3 + e;
modelIntercept <- lm(y ~ 1)
forwardBIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward", k =log(n));
forwardAIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward");
BICValue[i] = extractAIC(forwardBIC)[2];
AICValue[i] = extractAIC(forwardAIC)[2];
if(identical(attributes(forwardBIC$terms)$term.labels, c("x_1","x_2","x_3")) == TRUE){
BICTest[i] == TRUE
}
if(identical(attributes(forwardAIC$terms)$term.labels, c("x_1","x_2","x_3")) == TRUE){
AICTest[i] == TRUE
}
}
AICTest
BICTest
identical(attributes(forwardBIC$terms)$term.labels, c("x_1","x_2","x_3"))
BICTest[1] == TRUE
N  = 1000
n = 40
N  = 1000
n = 40
BICTest <- rep(FALSE, N)
BICValue <- rep(NaN, N)
AICTest <- rep(FALSE, N)
AICValue <- rep(NaN, N)
for(i in 1:N){
x_1 <- rnorm(n);
x_2 <- rnorm(n);
x_3 <- rnorm(n);
x_4 <- rnorm(n);
x_5 <- rnorm(n);
e <- rnorm(n, mean = 0, sd = .3);
y = .5 + .9*x_1 - .5*x_2 - .2*x_3 + e;
modelIntercept <- lm(y ~ 1)
forwardBIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward", k =log(n));
forwardAIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward");
BICValue[i] = extractAIC(forwardBIC)[2];
AICValue[i] = extractAIC(forwardAIC)[2];
if(identical(attributes(forwardBIC$terms)$term.labels, c("x_1","x_2","x_3")) == TRUE){
BICTest[i] = TRUE
}
if(identical(attributes(forwardAIC$terms)$term.labels, c("x_1","x_2","x_3")) == TRUE){
AICTest[i] = TRUE
}
}
BICValue
BICTest
sum(BICTest)
BICTest <- rep(FALSE, N)
sum(BICTest)
length(x_1)
N  = 1000
n = 40
BICTest <- rep(FALSE, N)
BICValue <- rep(NaN, N)
AICTest <- rep(FALSE, N)
AICValue <- rep(NaN, N)
for(i in 1:N){
x_1 <- rnorm(n);
x_2 <- rnorm(n);
x_3 <- rnorm(n);
x_4 <- rnorm(n);
x_5 <- rnorm(n);
e <- rnorm(n, mean = 0, sd = .3);
y = .5 + .9*x_1 - .5*x_2 - .2*x_3 + e;
modelIntercept <- lm(y ~ 1)
forwardBIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward", k =log(n));
forwardAIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward");
BICValue[i] = extractAIC(forwardBIC)[2];
AICValue[i] = extractAIC(forwardAIC)[2];
if(identical(attributes(forwardBIC$terms)$term.labels, c("x_1","x_2","x_3")) == TRUE){
BICTest[i] = TRUE
}
if(identical(attributes(forwardAIC$terms)$term.labels, c("x_1","x_2","x_3")) == TRUE){
AICTest[i] = TRUE
}
}
PropBIC = sum(BICTest)/N
PropAIC = sum(AICTest)/N
PropAIC
PropBIC
install.packages(minpack)
install.packages('minpack')
install.packages('minpack')
install.packages(minpack.lm)
setwd("~/Documents/Documents/College Work/Homework-Fall-2021/Scientific Sampling/Sampling Project #3")
knitr::opts_chunk$set(echo = TRUE)
SamplingData <- read_csv("SamplingProject#3Data - Collated Data.csv")
SamplingData <- read_csv("SamplingProject#3Data - Collated Data.csv")
SamplingData <- read.csv("SamplingProject#3Data - Collated Data.csv")
N <- c(nrow(Strata_2),nrow(Strata_3),nrow(Strata_4))
knitr::opts_chunk$set(echo = TRUE)
## Data input has all bookcases represented as x,y
## coordinate pair, along with their strata assignment(rank)
## Rank 1 is for empty
## Rank 2 is for low
## Rank 3 is for med
## Rank 4 is for high
BookcaseRankings<- read.csv('LibraryBookcaseRankings.csv')
## Subsetting the dataframe by ranking.
Strata_1 = BookcaseRankings[BookcaseRankings$Rank == 1,]
Strata_2 = BookcaseRankings[BookcaseRankings$Rank == 2,]
Strata_3 = BookcaseRankings[BookcaseRankings$Rank == 3,]
Strata_4 = BookcaseRankings[BookcaseRankings$Rank == 4,]
## Setting Seed to reproduce samples
set.seed(1)
### Sampling relevant dataframes.
## Pulling Index.
Strata_2_SampleIndex <- sample(nrow(Strata_2), size = 3)
Strata_3_SampleIndex <- sample(nrow(Strata_3), size = 3)
Strata_4_SampleIndex <- sample(nrow(Strata_4), size = 3)
## Assigning Row Values.
Strata_2_Sample <- Strata_2[Strata_2_SampleIndex,]
Strata_3_Sample <- Strata_3[Strata_3_SampleIndex,]
Strata_4_Sample <- Strata_4[Strata_4_SampleIndex,]
Stefano <- rbind(Strata_2_Sample[1,],Strata_3_Sample[1,], Strata_4_Sample[1,] )
Emily <- rbind(Strata_2_Sample[2,],Strata_3_Sample[2,], Strata_4_Sample[2,] )
Thomas <- rbind(Strata_2_Sample[3,],Strata_3_Sample[3,], Strata_4_Sample[3,] )
Stefano
Emily
Thomas
knitr::include_graphics('CoordinateRoadmap.png')
SamplingData <- read.csv("SamplingProject#3Data - Collated Data.csv")
N <- c(nrow(Strata_2),nrow(Strata_3),nrow(Strata_4))
M <- SamplingData
M <- SamplingData[1,]
M
SamplingData <- read.csv("SamplingProject#3Data - Collated Data.csv")
N <- c(nrow(Strata_2),nrow(Strata_3),nrow(Strata_4))
M <- SamplingData
SamplingData
SamplingData <- read.csv("SamplingProject#3Data - Collated Data.csv")
N <- c(nrow(Strata_2),nrow(Strata_3),nrow(Strata_4))
M <- SamplingData
SamplingData <- read.csv("SamplingProject#3Data - Collated Data.csv")
N <- c(nrow(Strata_2),nrow(Strata_3),nrow(Strata_4))
M <- SamplingData
SamplingData
SamplingData <- read.csv("SampledData.csv")
SamplingData <- read.csv("SampledData.csv")
